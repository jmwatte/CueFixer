function New-CueFileFromFolder {
    <#
    .SYNOPSIS
      Create a minimal .cue listing audio files present in a folder.

    .DESCRIPTION
      Writes a small .cue that lists each audio file in the folder using
      FILE "<name>" <FORMAT>. This is intended as a starting point for manual editing.

    .PARAMETER FolderPath
      Folder containing audio files.

    .PARAMETER OutputCuePath
      Where to write the cue. Defaults to '<Folder>\generated.cue' or to the same base name as an existing cue when caller provides it.

    .PARAMETER Extensions
      File extensions to consider (default common audio types).

    .PARAMETER Overwrite
      Overwrite existing output file.

    .OUTPUTS
      The full path to the created cue file (string) or $null on failure.
    #>
    param(
        [Parameter(Mandatory=$true)][string]$FolderPath,
        [string]$OutputCuePath = (Join-Path $FolderPath 'generated.cue'),
        [string[]]$Extensions = @('*.flac','*.wav','*.ape','*.mp3','*.m4a','*.aac','*.ogg'),
        [switch]$Overwrite
    )

    if (-not (Test-Path $FolderPath)) { throw "Folder not found: $FolderPath" }

    $audio = @()
    foreach ($e in $Extensions) {
        $audio += Get-ChildItem -Path $FolderPath -File -Filter $e -ErrorAction SilentlyContinue
    }
    $audio = $audio | Sort-Object Name

    if (-not $audio -or $audio.Count -eq 0) {
        Write-Warning "No audio files found in '$FolderPath' (checked: $($Extensions -join ', ')). Nothing written."
        return $null
    }

    if ((Test-Path $OutputCuePath) -and -not $Overwrite) {
        throw "Output path already exists: $OutputCuePath (use -Overwrite to replace)"
    }

    $lines = @()
    $lines += 'REM Generated by CueFixer - minimal CUE (please edit)'
    $lines += 'PERFORMER ""'
    $lines += 'TITLE ""'
    foreach ($f in $audio) {
        $ext = $f.Extension.ToLowerInvariant().TrimStart('.')
        # Use WAVE for wav; otherwise BINARY is safe for general audio containers
        $format = if ($ext -eq 'wav') { 'WAVE' } else { 'BINARY' }
        $lines += ("FILE `"" + $f.Name + "`" " + $format)
    }

    # Write UTF8 without BOM (Set-Content will include BOM for -Encoding UTF8 on some pwsh versions).
    # Use Out-File with -Encoding utf8 which is usually OK; adjust if you want BOM/no-BOM.
    $lines | Out-File -FilePath $OutputCuePath -Encoding utf8

    Write-Verbose "Wrote minimal cue: $OutputCuePath"
    return (Resolve-Path $OutputCuePath).Path
}

Export-ModuleMember -Function New-CueFileFromFolder -Force -ErrorAction SilentlyContinue