name: CI - Pester Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PowerShell modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/powershell/Modules
            C:\\Users\\runneradmin\\Documents\\PowerShell\\Modules
            C:\\Users\\runner\\Documents\\PowerShell\\Modules
          key: ${{ runner.os }}-psmodules-${{ hashFiles('**/*.ps1') }}
          restore-keys: |
            ${{ runner.os }}-psmodules-

      - name: Debug PowerShell runner info
        shell: pwsh
        run: |
          Write-Host "Runner OS: $env:RUNNER_OS"
          pwsh -v
          Write-Host "PWD: $(Get-Location)"
          Write-Host "PSModulePath entries:"
          $env:PSModulePath -split [System.IO.Path]::PathSeparator | ForEach-Object { Write-Host " - $_" }
          Write-Host "Top-level repo listing (files):"
          Get-ChildItem -Force -File -Depth 1 | ForEach-Object { Write-Host " - $($_.FullName)" }
          Write-Host "Tests directory listing (up to depth 3):"
          if (Test-Path ./Tests) {
            Get-ChildItem -Path ./Tests -Recurse -Depth 3 -Force | Select-Object -First 200 | ForEach-Object { Write-Host " - $($_.FullName)" }
          } else {
            Write-Host " - ./Tests not found"
          }

      - name: Install Pester
        shell: pwsh
        run: |
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted -ErrorAction SilentlyContinue
          Install-Module -Name Pester -Scope CurrentUser -Force

      - name: Run Pester tests
        shell: pwsh
        run: |
          Import-Module -Name ./CueFixer.psm1 -Force -Verbose
          # Use -Path (Pester v5) instead of legacy -Script hashtable to ensure tests are discovered
          Invoke-Pester -Path './Tests' -Output 'Detailed' -EnableExit

      - name: Run demo smoke test (dry-run)
        shell: pwsh
        run: |
          Import-Module -Name ./CueFixer.psm1 -Force -Verbose
          ./examples/run-demo.ps1
